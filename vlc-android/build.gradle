apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }

    task luaPlaylistCopy(type: Copy) {
        from '../vlc/share/lua/playlist'
        into 'assets/lua/playlist'
        exclude '**/*.txt'
    }

    task luaMetaCopy(type: Copy) {
        from '../vlc/share/lua/meta'
        into 'assets/lua/meta'
        exclude '**/*.txt'
    }

    task libcompatCopy(type: Copy) {
        from '../libvlc/libcompat/libs/armeabi'
        into 'assets'
        include '**/*.so'
    }

    task libcompatDelete(type: Delete) {
        delete fileTree('assets') {
            include '**/*.so'
        }
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId    "org.videolan.vlc"
        minSdkVersion    rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode      1
        versionName      '1.0'

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
        resValue "string", "build_vlc_revision", vlcRevision()

        tasks.whenTaskAdded { task ->
            if (task.name.startsWith('merge')) {
                //task.dependsOn luaPlaylistCopy
                //task.dependsOn luaMetaCopy

                if (task.name.contains('ARMv7') || task.name.contains('ARMv6')
                 || task.name.contains('ARMv5')) {
                    //task.dependsOn libcompatCopy
                }
                else {
                    //task.dependsOn libcompatDelete
                }
            }
        }

        //Set the build ABI according to build types only if not launched from compile.sh
        if (System.getenv('PASSWORD_KEYSTORE') == null)
            tasks.whenTaskAdded { task ->
                if (task.name.startsWith('assemble')) {
                    //if (task.name.endsWith('ARMv7Debug'))
                    //    task.dependsOn(":libvlc:buildDebugARMv7")
                    //else if (task.name.endsWith('ARMv8Debug'))
                    //    task.dependsOn(":libvlc:buildDebugARM64")
                    //else if (task.name.endsWith('X86Debug'))
                    //    task.dependsOn(":libvlc:buildDebugx86")
                }
            }
    }

    sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        aidl.srcDirs = ['src/main/java']
        resources.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
    }
    sourceSets.release {
        manifest.srcFile 'flavors/release/AndroidManifest.xml'
    }

    signingConfigs {
        release {
            /*
            create file gradle.properties with these 3 props.
            keyStoreFile=/home/<username>/.android/debug.keystore
            storealias=androiddebugkey
            storepwd=android
            storeFile file(keyStoreFile)
            keyAlias storealias
             */
            if (System.getenv('PASSWORD_KEYSTORE') != null && !System.getenv('PASSWORD_KEYSTORE').isEmpty()){
                //storePassword = System.getenv('PASSWORD_KEYSTORE')
                //keyPassword = System.getenv('PASSWORD_KEYSTORE')
            } else {
                //storePassword storepwd
                //keyPassword storepwd
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            proguardFile 'proguard.cfg'
        }
        debug {
            applicationIdSuffix '.debug'
            jniDebuggable true
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86'
            universalApk false
        }
    }
}

ext{
    abiCodes = ['armeabi-v7a':1, 'arm64-v8a':2, 'x86':3]
}

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    def manifestParser = new com.android.builder.core.DefaultManifestParser(android.sourceSets.main.manifest.srcFile)
    def vlcVersion = manifestParser.getVersionName()

    variant.outputs.each { output ->
        def abi = output.getFilter(OutputFile.ABI)
        def abiVersionCode = project.ext.abiCodes.get(abi)

        if (abiVersionCode != null) {
            output.versionCodeOverride = abiVersionCode * 1000 + variant.versionCode
        }
        def outputName = "vlc-android-" + vlcVersion + "-" + abi + ".apk"
        output.outputFile = new File(output.outputFile.parentFile, outputName);

        output.processManifest.doLast{
            def manifestOutFile = output.processManifest.manifestOutputFile
            def newFileContents = manifestOutFile.getText('UTF-8').replace("_PACKAGENAME_", variant.applicationId)
            manifestOutFile.write(newFileContents, 'UTF-8')
        }
    }
}
dependencies {
    compile project(':libvlc')
    compile project(':api')
    compile project(':axmlrpc')
    compile 'com.android.support:percent:25.1.0'
    compile 'com.android.support:design:25.1.0'
    compile 'com.android.support:preference-leanback-v17:25.1.0'
    compile 'com.android.support:leanback-v17:25.1.0'
    compile 'com.android.support:preference-v14:25.1.0'
    compile 'com.android.support:cardview-v7:25.1.0'
}

def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def hostName() {
    return System.getProperty("user.name") + "@" + InetAddress.localHost.hostName
}

def revision() {
    def code = new ByteArrayOutputStream()
    //exec {
    //    commandLine 'git', 'rev-parse', '--short', 'HEAD'
    //    standardOutput = code
    //}
    return code.toString()
}

def vlcRevision() {
    def code = new ByteArrayOutputStream()
    def vlc = new ByteArrayOutputStream()
    //exec {
    //    commandLine 'git', 'rev-parse', '--short', 'HEAD'
    //    workingDir '../vlc'
    //    standardOutput = vlc
    //}
    return vlc.toString()
}
